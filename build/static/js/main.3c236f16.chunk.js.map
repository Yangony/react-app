{"version":3,"sources":["components/common/topLine.jsx","page/index.jsx","page/page1.js","page/page2.js","route/App.js","serviceWorker.js","index.js"],"names":["TopLine","console","log","this","props","history","goBack","_this$props","url","push","window","location","_this","title","react_default","a","createElement","es","mode","icon","type","onLeftClick","Component","Item","List","App","id","className","topLine","message","renderHeader","extra","onClick","goback","page1_Item","img","style","fill","BrowserRouter","Switch","AnimatedRouter","timeout","Route","exact","path","component","Index","Page1","Page2","Boolean","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3c236f16.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { NavBar, Icon } from 'antd-mobile';\n\nclass TopLine extends Component {\n\n  goback() {\n    console.log(this.props.history);\n    this.props.history.goBack('/')\n  }\n\n  onLeftClick () {\n    let {history, url} = this.props\n    if (history){\n      if (url) {\n        this.props.history.push(url)\n      } else {\n        this.props.history.goBack()\n      }\n    } else {\n      window.location = url\n    }\n  }\n\n  render() {\n    let {title} = this.props\n    if (!title) {\n      title = '页面标题'\n    }\n    return (\n        <NavBar\n          mode=\"light\"\n          icon={<Icon type=\"left\" />}\n          onLeftClick={() => this.onLeftClick()}\n          // rightContent={[\n          //   <Icon key=\"0\" type=\"search\" style={{ marginRight: '16px' }} />,\n          //   <Icon key=\"1\" type=\"ellipsis\" />,\n          // ]}\n        >{title}</NavBar>\n    );\n  }\n}\n\nexport default TopLine;\n","import React, { Component } from 'react';\n// import { Link } from 'react-router-dom'\nimport { Result, List, WingBlank } from 'antd-mobile';\nimport TopLine from '@/components/common/topLine'\n\nconst Item = List.Item;\n\nclass App extends Component {\n\n  goback(id) {\n    this.props.history.push('/page'+id)\n  }\n\n\n  render() {\n    return (\n      <div className=\"outer\">\n        <TopLine history={this.props.history} title='这里是首页'></TopLine>\n        <Result\n            // img={<Icon type=\"cross-circle-o\" className=\"spe\" style={{ fill: '#F13642' }} />}\n            title=\"欢迎使用\"\n            message=\"这是首页，点击下面按钮进入其他页面\"\n        />\n        <WingBlank/>\n        <List renderHeader={() => 'Basic Style'} className=\"my-list\">\n          <Item extra={'extra content'} onClick={() => this.goback('1')}>第一个页面</Item>\n          <Item extra={'extra content'} onClick={() => this.goback('2')}>第二个页面</Item>\n        </List>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from 'react';\n// import { Link } from 'react-router-dom'\nimport { List } from 'antd-mobile'\n\nimport TopLine from '@/components/common/topLine'\n\nconst Item = List.Item;\n\nclass App extends Component {\n\n  goback() {\n    this.props.history.push('/page2')\n  }\n\n  render() {\n    return (\n      <div className=\"outer\">\n        <TopLine history={this.props.history} title='这是第一页内容'></TopLine>\n        <List renderHeader={() => 'Basic Style'} className=\"my-list\">\n          <Item extra={'extra content'} onClick={() => this.goback()}>Title</Item>\n        </List>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from 'react';\n// import { Link } from 'react-router-dom'\nimport { Result, Icon } from 'antd-mobile';\nimport TopLine from '@/components/common/topLine'\nclass App extends Component {\n\n  goback() {\n    console.log(this.props.history);\n    this.props.history.goBack('/')\n  }\n\n\n  render() {\n    return (\n      <div className=\"outer\">\n        <TopLine history={this.props.history} title='这是第二页内容'></TopLine>\n        <Result\n            img={<Icon type=\"cross-circle-o\" className=\"spe\" style={{ fill: '#F13642' }} />}\n            title=\"这是第二个页面\"\n            message=\"\"\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from 'react'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\n// Redirect\nimport AnimatedRouter from 'react-animated-router'; //导入我们的的AnimatedRouter组件\nimport 'react-animated-router/animate.css';\nimport Index from '@/page/index'\nimport Page1 from '@/page/page1'\nimport Page2 from '@/page/page2'\n\n\nexport default class App extends Component {\n  render () {\n    return (\n      <Router>\n        <Switch>\n          <AnimatedRouter timeout={300}>\n            <Route exact path='/' component={Index} />\n            <Route exact path='/page1' component={Page1} />\n            <Route exact path='/page2' component={Page2} />\n            {/* <Redirect from='*' to='/simple/err' /> */}\n          </AnimatedRouter>\n        </Switch>\n      </Router>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'antd-mobile/dist/antd-mobile.css';\nimport './style/style.scss'\nimport App from './route/App'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}